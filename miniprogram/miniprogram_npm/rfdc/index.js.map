{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\r\nmodule.exports = rfdc\r\n\r\nfunction copyBuffer (cur) {\r\n  if (cur instanceof Buffer) {\r\n    return Buffer.from(cur)\r\n  }\r\n\r\n  return new cur.constructor(cur.buffer.slice(), cur.byteOffset, cur.length)\r\n}\r\n\r\nfunction rfdc (opts) {\r\n  opts = opts || {}\r\n\r\n  if (opts.circles) return rfdcCircles(opts)\r\n  return opts.proto ? cloneProto : clone\r\n\r\n  function cloneArray (a, fn) {\r\n    var keys = Object.keys(a)\r\n    var a2 = new Array(keys.length)\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var k = keys[i]\r\n      var cur = a[k]\r\n      if (typeof cur !== 'object' || cur === null) {\r\n        a2[k] = cur\r\n      } else if (cur instanceof Date) {\r\n        a2[k] = new Date(cur)\r\n      } else if (ArrayBuffer.isView(cur)) {\r\n        a2[k] = copyBuffer(cur)\r\n      } else {\r\n        a2[k] = fn(cur)\r\n      }\r\n    }\r\n    return a2\r\n  }\r\n\r\n  function clone (o) {\r\n    if (typeof o !== 'object' || o === null) return o\r\n    if (o instanceof Date) return new Date(o)\r\n    if (Array.isArray(o)) return cloneArray(o, clone)\r\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))\r\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))\r\n    var o2 = {}\r\n    for (var k in o) {\r\n      if (Object.hasOwnProperty.call(o, k) === false) continue\r\n      var cur = o[k]\r\n      if (typeof cur !== 'object' || cur === null) {\r\n        o2[k] = cur\r\n      } else if (cur instanceof Date) {\r\n        o2[k] = new Date(cur)\r\n      } else if (cur instanceof Map) {\r\n        o2[k] = new Map(cloneArray(Array.from(cur), clone))\r\n      } else if (cur instanceof Set) {\r\n        o2[k] = new Set(cloneArray(Array.from(cur), clone))\r\n      } else if (ArrayBuffer.isView(cur)) {\r\n        o2[k] = copyBuffer(cur)\r\n      } else {\r\n        o2[k] = clone(cur)\r\n      }\r\n    }\r\n    return o2\r\n  }\r\n\r\n  function cloneProto (o) {\r\n    if (typeof o !== 'object' || o === null) return o\r\n    if (o instanceof Date) return new Date(o)\r\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\r\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))\r\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))\r\n    var o2 = {}\r\n    for (var k in o) {\r\n      var cur = o[k]\r\n      if (typeof cur !== 'object' || cur === null) {\r\n        o2[k] = cur\r\n      } else if (cur instanceof Date) {\r\n        o2[k] = new Date(cur)\r\n      } else if (cur instanceof Map) {\r\n        o2[k] = new Map(cloneArray(Array.from(cur), cloneProto))\r\n      } else if (cur instanceof Set) {\r\n        o2[k] = new Set(cloneArray(Array.from(cur), cloneProto))\r\n      } else if (ArrayBuffer.isView(cur)) {\r\n        o2[k] = copyBuffer(cur)\r\n      } else {\r\n        o2[k] = cloneProto(cur)\r\n      }\r\n    }\r\n    return o2\r\n  }\r\n}\r\n\r\nfunction rfdcCircles (opts) {\r\n  var refs = []\r\n  var refsNew = []\r\n\r\n  return opts.proto ? cloneProto : clone\r\n\r\n  function cloneArray (a, fn) {\r\n    var keys = Object.keys(a)\r\n    var a2 = new Array(keys.length)\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var k = keys[i]\r\n      var cur = a[k]\r\n      if (typeof cur !== 'object' || cur === null) {\r\n        a2[k] = cur\r\n      } else if (cur instanceof Date) {\r\n        a2[k] = new Date(cur)\r\n      } else if (ArrayBuffer.isView(cur)) {\r\n        a2[k] = copyBuffer(cur)\r\n      } else {\r\n        var index = refs.indexOf(cur)\r\n        if (index !== -1) {\r\n          a2[k] = refsNew[index]\r\n        } else {\r\n          a2[k] = fn(cur)\r\n        }\r\n      }\r\n    }\r\n    return a2\r\n  }\r\n\r\n  function clone (o) {\r\n    if (typeof o !== 'object' || o === null) return o\r\n    if (o instanceof Date) return new Date(o)\r\n    if (Array.isArray(o)) return cloneArray(o, clone)\r\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), clone))\r\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), clone))\r\n    var o2 = {}\r\n    refs.push(o)\r\n    refsNew.push(o2)\r\n    for (var k in o) {\r\n      if (Object.hasOwnProperty.call(o, k) === false) continue\r\n      var cur = o[k]\r\n      if (typeof cur !== 'object' || cur === null) {\r\n        o2[k] = cur\r\n      } else if (cur instanceof Date) {\r\n        o2[k] = new Date(cur)\r\n      } else if (cur instanceof Map) {\r\n        o2[k] = new Map(cloneArray(Array.from(cur), clone))\r\n      } else if (cur instanceof Set) {\r\n        o2[k] = new Set(cloneArray(Array.from(cur), clone))\r\n      } else if (ArrayBuffer.isView(cur)) {\r\n        o2[k] = copyBuffer(cur)\r\n      } else {\r\n        var i = refs.indexOf(cur)\r\n        if (i !== -1) {\r\n          o2[k] = refsNew[i]\r\n        } else {\r\n          o2[k] = clone(cur)\r\n        }\r\n      }\r\n    }\r\n    refs.pop()\r\n    refsNew.pop()\r\n    return o2\r\n  }\r\n\r\n  function cloneProto (o) {\r\n    if (typeof o !== 'object' || o === null) return o\r\n    if (o instanceof Date) return new Date(o)\r\n    if (Array.isArray(o)) return cloneArray(o, cloneProto)\r\n    if (o instanceof Map) return new Map(cloneArray(Array.from(o), cloneProto))\r\n    if (o instanceof Set) return new Set(cloneArray(Array.from(o), cloneProto))\r\n    var o2 = {}\r\n    refs.push(o)\r\n    refsNew.push(o2)\r\n    for (var k in o) {\r\n      var cur = o[k]\r\n      if (typeof cur !== 'object' || cur === null) {\r\n        o2[k] = cur\r\n      } else if (cur instanceof Date) {\r\n        o2[k] = new Date(cur)\r\n      } else if (cur instanceof Map) {\r\n        o2[k] = new Map(cloneArray(Array.from(cur), cloneProto))\r\n      } else if (cur instanceof Set) {\r\n        o2[k] = new Set(cloneArray(Array.from(cur), cloneProto))\r\n      } else if (ArrayBuffer.isView(cur)) {\r\n        o2[k] = copyBuffer(cur)\r\n      } else {\r\n        var i = refs.indexOf(cur)\r\n        if (i !== -1) {\r\n          o2[k] = refsNew[i]\r\n        } else {\r\n          o2[k] = cloneProto(cur)\r\n        }\r\n      }\r\n    }\r\n    refs.pop()\r\n    refsNew.pop()\r\n    return o2\r\n  }\r\n}\r\n"]}